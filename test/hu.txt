import java.util.*;

public class Main {
    static int n;
    static int[][] a;
    static int[][] b; // 从起点到各点的最小成本
    static int[][] c; // 从终点到各点的最小成本

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        a = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                a[i][j] = sc.nextInt();
            }
        }

        // 初始化b数组（从左上到右下）
        b = new int[n][n];
        for (int[] row : b) Arrays.fill(row, Integer.MAX_VALUE);
        if (a[0][0] != 0) {
            b[0][0] = a[0][0];
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (a[i][j] == 0) continue;
                    if (i == 0 && j == 0) continue;
                    int minPrev = Integer.MAX_VALUE;
                    if (i > 0 && b[i - 1][j] != Integer.MAX_VALUE) {
                        minPrev = Math.min(minPrev, b[i - 1][j]);
                    }
                    if (j > 0 && b[i][j - 1] != Integer.MAX_VALUE) {
                        minPrev = Math.min(minPrev, b[i][j - 1]);
                    }
                    if (minPrev != Integer.MAX_VALUE) {
                        b[i][j] = minPrev + a[i][j];
                    }
                }
            }
        }

        // 初始化c数组（从右下到左上）
        c = new int[n][n];
        for (int[] row : c) Arrays.fill(row, Integer.MAX_VALUE);
        if (a[n - 1][n - 1] != 0) {
            c[n - 1][n - 1] = a[n - 1][n - 1];
            for (int i = n - 1; i >= 0; i--) {
                for (int j = n - 1; j >= 0; j--) {
                    if (a[i][j] == 0) continue;
                    if (i == n - 1 && j == n - 1) continue;
                    int minNext = Integer.MAX_VALUE;
                    if (i < n - 1 && c[i + 1][j] != Integer.MAX_VALUE) {
                        minNext = Math.min(minNext, c[i + 1][j]);
                    }
                    if (j < n - 1 && c[i][j + 1] != Integer.MAX_VALUE) {
                        minNext = Math.min(minNext, c[i][j + 1]);
                    }
                    if (minNext != Integer.MAX_VALUE) {
                        c[i][j] = minNext + a[i][j];
                    }
                }
            }
        }

        int minCost = Integer.MAX_VALUE;
        int[][] directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};

        // 遍历所有相邻节点对
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (a[i][j] == 0) continue;
                for (int[] dir : directions) {
                    int x = i + dir[0];
                    int y = j + dir[1];
                    if (x >= 0 && x < n && y >= 0 && y < n && a[x][y] != 0) {
                        // 情况1：A在(i,j)，B在(x,y)
                        if (b[i][j] != Integer.MAX_VALUE && c[x][y] != Integer.MAX_VALUE) {
                            int cost = Math.max(b[i][j], c[x][y]);
                            if (cost < minCost) {
                                minCost = cost;
                            }
                        }
                        // 情况2：A在(x,y)，B在(i,j)
                        if (b[x][y] != Integer.MAX_VALUE && c[i][j] != Integer.MAX_VALUE) {
                            int cost = Math.max(b[x][y], c[i][j]);
                            if (cost < minCost) {
                                minCost = cost;
                            }
                        }
                    }
                }
            }
        }

        System.out.println(minCost == Integer.MAX_VALUE ? -1 : minCost);
    }
}
